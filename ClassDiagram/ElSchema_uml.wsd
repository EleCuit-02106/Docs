@startuml ElSchema

namespace UI {
    class HUD <<View>>
    HUD --> Inventory.IRxCircuitInventory
    HUD --> Inventory.IRxScoreInventory

    class PartToolBox
    PartToolBox --> Inventory.IRxPartInventory
}

namespace Inventory {
    ' 所持している電気回路部品の個数を管理する
    class PartInventory
    interface IRxPartInventory
    IRxPartInventory <|.. PartInventory
    UserCommand.IRxPartDragCommandPublisher <-- PartInventory
    ' 所持している導線の長さを管理する
    class CircuitInventory
    interface IRxCircuitInventory
    IRxCircuitInventory <|.. CircuitInventory
    interface ICircuitInventoryInitializer
    CircuitInventory ..|> ICircuitInventoryInitializer
    UserCommand.IRxCircuitDrawingCommandPublisher <-- CircuitInventory
    ' 所持しているスコアを管理する
    class ScoreInventory
    interface IRxScoreInventory
    IRxScoreInventory <|.. ScoreInventory
}

namespace Course {
    ' コースそのもの
    class Course
    interface IReadOnlyCourse
    IReadOnlyCourse <|.. Course

    class CourseFactory<<static>>
    CourseFactory .left> Course

    ' 電気回路部品の設置可否を判断する
    class PartSetupAcceptor
    UserCommand.IRxPartDragCommandPublisher <-- PartSetupAcceptor
    ' 受け付けた部品配置承認依頼の承認・否認を配信する
    interface IRxPartSetupAcceptOrDeny
    PartSetupAcceptor ..|> IRxPartSetupAcceptOrDeny
    PartSetupAcceptor --> IReadOnlyCourse

    ' 導線の設置可否を判断する
    class CircuitSetupAcceptor
    UserCommand.IRxCircuitDrawingCommandPublisher <-- CircuitSetupAcceptor
    CircuitSetupAcceptor --> IReadOnlyCourse
}

namespace Deserialize {
    ' コースデータを読み込んで解釈する
    class CourseDeserializer
    Inventory.ICircuitInventoryInitializer <-- CourseDeserializer
    Course.CourseFactory <-- CourseDeserializer
}

namespace Settings {
    ' Partのマスターデータを設定する
    class PartSettings<<singleton>>
    interface IPartSettings
    IPartSettings <|.. PartSettings
}

namespace UserCommand {
    ' ユーザーが部品をドラッグしていることを検知する
    interface IRxPartDragCommandPublisher
    class PartDragCommandDetector
    PartDragCommandDetector ..|> IRxPartDragCommandPublisher
    Input.IRxTouchInput <-- PartDragCommandDetector

    ' ユーザーが導線を描画していることを検知する
    interface IRxCircuitDrawingCommandPublisher
    class CircuitDrawingCommandDetector
    CircuitDrawingCommandDetector ..|> IRxCircuitDrawingCommandPublisher
    Input.IRxTouchInput <-- CircuitDrawingCommandDetector
}

' 電気回路図の部品
namespace Parts {
    interface IPart {
        +Affect() : void
    }
    ' 電気が到達するとスコアに影響を与える
    interface IScorePart{

    }
    ' 電気が到達すると電圧に影響を与える
    interface IVoltagePart {

    }

    IPart <|.. IScorePart
    IPart <|.. IVoltagePart

    ' 抵抗
    class Resistance
    ' 電球
    class LightBulb

    IVoltagePart <|.. Resistance
    IScorePart <|.. LightBulb
}

namespace Electric {
    ' 電気の先頭
    class ElectricNode
    interface IElectricNode
    interface IRxElectricNodePosition
    IElectricNode <|.. ElectricNode
    ElectricNode .|> IRxElectricNodePosition
    ' 電気が進む先を決定する
    class ElectricNavigator
    IElectricNode <- ElectricNavigator
    ' 電気が何らかの部品に到達したことを検知する
    class PartDetector
    ' 画面上に存在する電気ノードを保持する
    class ElectricNodeStorage
    interface IRxElectricNodePositions
    IRxElectricNodePositions <|.. ElectricNodeStorage
    ElectricNodeStorage "1" o-- "*" IElectricNode

    PartDetector ---> Parts.IPart
}

namespace Camera {
    class Camerawork
    Camerawork --> Electric.IRxElectricNodePositions
}

namespace Input {
    ' タッチ入力を検知する
    interface IRxTouchInput
    class TouchDetector 
    TouchDetector ..|> IRxTouchInput
}


namespace Renderer {
    ' 導線と電気回路部品のレンダラー
    class CourseRenderer
    Course.IReadOnlyCourse <-- CourseRenderer
    ' 電気の軌跡のレンダラー
    class ElectricPassRenderer
    Electric.IRxElectricNodePosition <-- ElectricPassRenderer
    ' 部品配置プレビューサインのレンダラー
    class PartAcceptSignRenderer
    Course.IRxPartSetupAcceptOrDeny <-- PartAcceptSignRenderer
    ' ドラッグ中の軌跡を描画するレンダラー
    class PartDraggingRenderer
    UserCommand.IRxPartDragCommandPublisher <-- PartDraggingRenderer
}

@enduml